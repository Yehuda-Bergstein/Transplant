# Copy this file and rename to cli_config.py

# API keys:
api_key_RED = "123456"
api_key_OPS = "654321"

# for Windows paths, double up the backslashes
# Music files can be found here:
data_dir = "D:\\Test"
# Set to True if torrent folders can be deeper than a direct subfolder(=level 1) of data_dir
# Level determines how deep the torrent folder can be found
deep_search = False
deep_search_level = 2

# .torrent is saved here
# Put 'None' (without quotes) if you don't want the .torrent to be saved to disc:
torrent_save_dir = "D:\\Test\\Torrents"

# will be scanned for .torrent files in batchmode
scan_dir = "D:\\Test\\Torrents\\tBatch"

# delete the .torrents from batch folder after successful upload. True/False
del_dtors = False

# check if torrent content can be found before uploading. True/False
# Be very careful when setting this to False. It will allow you to transplant torrents you can't seed.
file_check = True

# Check if the upload was merged into an existing group or if the log scores are different.
post_upload_checks = False

# level of feedback.
# 0: silent, 1: only errors, 2: normal, 3: debugging
verbosity = 2

# rehost non-whitelisted images
img_rehost = False
whitelist = ["ptpimg.me", "thesungod.xyz"]
image_hosts = {
    # 'name': (enabled, 'api key', priority)
    # Enabled image hosts will be tried in 'priority' order
    'Ra': (False, '123345', 1),
    'PTPimg': (False, '12345', 2),
    'ImgBB': (False, '12345', 3),
}

# Set a custom release description.

# You can use these placeholders:"
# %src_id% :   Source id (OPS/RED)
# "%src_url% :  Source url (eg https://redacted.ch/)
# "%ori_upl% :  Name of uploader
# "%upl_id% :   id of uploader
# "%tor_id% :   Source torrent id
# "%gr_id% :    Source torrent group id

rel_descr = "Transplanted from %src_id%, thanks to the original uploader."
rel_descr_own_uploads = "Transplant of my own upload on %src_id%"

# Add release description from source if present
add_src_descr = True

# Must contain %src_descr%
src_descr = '[hide=source description:]%src_descr%[/hide]'

# give output colours based on status: error > red, warning > yellow, success > green
coloured_output = False
